// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RevTech.Data;

#nullable disable

namespace RevTech.Data.Migrations
{
    [DbContext(typeof(RevtechDbContext))]
    [Migration("20230625105340_SeedCarModels")]
    partial class SeedCarModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.ECUTuning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePowerBoost")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TorqueBoost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.ToTable("ECUTunings");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.ExhaustKit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePowerBoost")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TorqueBoost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.ToTable("ExhaustKits");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.FuelPump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePowerBoost")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TorqueBoost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.ToTable("FuelPumps");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.InjectorKit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePowerBoost")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TorqueBoost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.ToTable("InjectorKits");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.OilCooler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.ToTable("OilCoolers");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.SparkPlugs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("PriceForKit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.ToTable("SparkPlugsKits");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.SuperchargerKit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePowerBoost")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TorqueBoost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.ToTable("SuperchargerKits");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.TCUTuning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ECUTuningId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ECUTuningId");

                    b.ToTable("TCUTunings");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.TurboKit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePowerBoost")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("PressureBoost")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TorqueBoost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.ToTable("TurboKits");
                });

            modelBuilder.Entity("RevTech.Data.Models.UserConfiguration.UserConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarModelId")
                        .HasColumnType("int");

                    b.Property<int?>("ECUTuningId")
                        .HasColumnType("int");

                    b.Property<int?>("ExhaustKitId")
                        .HasColumnType("int");

                    b.Property<int?>("FuelPumpId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePowerBoostTotal")
                        .HasColumnType("int");

                    b.Property<int?>("InjectorKitId")
                        .HasColumnType("int");

                    b.Property<int?>("OilCoolerId")
                        .HasColumnType("int");

                    b.Property<int?>("SparkPlugsId")
                        .HasColumnType("int");

                    b.Property<int?>("SuperchargerKitId")
                        .HasColumnType("int");

                    b.Property<int?>("TCUTuningId")
                        .HasColumnType("int");

                    b.Property<int>("TorqueBoostTotal")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TurboKitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.HasIndex("ECUTuningId");

                    b.HasIndex("ExhaustKitId");

                    b.HasIndex("FuelPumpId");

                    b.HasIndex("InjectorKitId");

                    b.HasIndex("OilCoolerId");

                    b.HasIndex("SparkPlugsId");

                    b.HasIndex("SuperchargerKitId");

                    b.HasIndex("TCUTuningId");

                    b.HasIndex("TurboKitId");

                    b.ToTable("UsersConfigurations");
                });

            modelBuilder.Entity("RevTech.Data.Models.Vehicles.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("YearCreated_End")
                        .HasColumnType("int");

                    b.Property<int>("YearCreated_Start")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("CarModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageURL = "https://img.favcars.com/audi/a6/photos_audi_a6_2001_2_b.jpg",
                            ManufacturerId = 1,
                            ModelName = "A6 C5",
                            YearCreated_End = 2004,
                            YearCreated_Start = 1997
                        },
                        new
                        {
                            Id = 2,
                            ImageURL = "https://i.ytimg.com/vi/AAfmxSRncBU/maxresdefault.jpg",
                            ManufacturerId = 1,
                            ModelName = "A4 B5",
                            YearCreated_End = 2001,
                            YearCreated_Start = 1996
                        },
                        new
                        {
                            Id = 3,
                            ImageURL = "https://stillrunningstrong.com/wp-content/uploads/2018/03/Audi-A4-b6-sport-model-S4-1024x466.jpg",
                            ManufacturerId = 1,
                            ModelName = "A4 B6",
                            YearCreated_End = 2004,
                            YearCreated_Start = 2002
                        },
                        new
                        {
                            Id = 4,
                            ImageURL = "https://images.fitmentindustries.com/web-compressed/1740944-1-2001-s4-audi-base-bc-racing-coilovers-bbs-ch-r-silver.jpg",
                            ManufacturerId = 1,
                            ModelName = "S4 B5",
                            YearCreated_End = 2001,
                            YearCreated_Start = 1997
                        },
                        new
                        {
                            Id = 5,
                            ImageURL = "https://media.evo.co.uk/image/private/s--zWq7JwVH--/v1556260759/evo/images/dir_688/car_photo_344347.jpg",
                            ManufacturerId = 1,
                            ModelName = "RS4 B7",
                            YearCreated_End = 2009,
                            YearCreated_Start = 2005
                        },
                        new
                        {
                            Id = 6,
                            ImageURL = "https://www.ast-suspension.com/imager/common/10988/Audi-S5-B8-3_ccc647699d3b878f33fab0fc43e2f880.jpg",
                            ManufacturerId = 1,
                            ModelName = "S5 B8",
                            YearCreated_End = 2013,
                            YearCreated_Start = 2007
                        },
                        new
                        {
                            Id = 7,
                            ImageURL = "https://en.audiclub.eu/graphics/gallery/full/2178_13237385133-509f54d839-b.jpg",
                            ManufacturerId = 1,
                            ModelName = "S5 B8.5",
                            YearCreated_End = 2017,
                            YearCreated_Start = 2013
                        },
                        new
                        {
                            Id = 8,
                            ImageURL = "https://cimg7.ibsrv.net/gimg/www.audiworld.com-vbulletin/1200x837/audi_driveway_725b6dcf65369cb5d7d45810f3e5e8d8c487097a.jpg",
                            ManufacturerId = 1,
                            ModelName = "RS5 B8.5",
                            YearCreated_End = 2017,
                            YearCreated_Start = 2013
                        },
                        new
                        {
                            Id = 9,
                            ImageURL = "https://cdn.shopify.com/s/files/1/0570/5518/3000/collections/a6_c6.jpg?v=1648793950",
                            ManufacturerId = 1,
                            ModelName = "A6 C6",
                            YearCreated_End = 2011,
                            YearCreated_Start = 2004
                        },
                        new
                        {
                            Id = 10,
                            ImageURL = "https://i.pinimg.com/originals/e1/a2/32/e1a232889a2009dffca15f9b432ab3b8.jpg",
                            ManufacturerId = 1,
                            ModelName = "A4 B7",
                            YearCreated_End = 2008,
                            YearCreated_Start = 2004
                        },
                        new
                        {
                            Id = 11,
                            ImageURL = "https://i.pinimg.com/originals/4f/54/ea/4f54ea4597e4fc876df08c49bad03992.jpg",
                            ManufacturerId = 1,
                            ModelName = "A4 B8.5",
                            YearCreated_End = 2015,
                            YearCreated_Start = 2012
                        },
                        new
                        {
                            Id = 12,
                            ImageURL = "https://img.md-exclusive-cardesign.com/wp-content/uploads/2019/10/audi-a6-c7-limousine-breitbau-tuning-pd600r-widebody-kit-artform-af-401-felgen-in-105x21-md-exclusive-cardesign-16-455x179.jpg",
                            ManufacturerId = 1,
                            ModelName = "S6 C7",
                            YearCreated_End = 2018,
                            YearCreated_Start = 2011
                        },
                        new
                        {
                            Id = 13,
                            ImageURL = "https://img.md-exclusive-cardesign.com/wp-content/uploads/2019/10/audi-a6-c7-limousine-breitbau-tuning-pd600r-widebody-kit-artform-af-401-felgen-in-105x21-md-exclusive-cardesign-16-455x179.jpg",
                            ManufacturerId = 1,
                            ModelName = "RS6 C7",
                            YearCreated_End = 2018,
                            YearCreated_Start = 2011
                        },
                        new
                        {
                            Id = 14,
                            ImageURL = "https://www.tuning.bg/public/upload/gallery/extended/normal/1358582002.jpg",
                            ManufacturerId = 1,
                            ModelName = "S8 D4",
                            YearCreated_End = 2015,
                            YearCreated_Start = 2012
                        },
                        new
                        {
                            Id = 15,
                            ImageURL = "https://cdn-0.carsopedia.com/files/generations/Audi-D4-498.jpg",
                            ManufacturerId = 1,
                            ModelName = "S8+ D4.5",
                            YearCreated_End = 2018,
                            YearCreated_Start = 2015
                        },
                        new
                        {
                            Id = 16,
                            ImageURL = "https://www.auto-data.net/images/f4/file3193601.jpg",
                            ManufacturerId = 1,
                            ModelName = "S7 C7",
                            YearCreated_End = 2017,
                            YearCreated_Start = 2012
                        },
                        new
                        {
                            Id = 17,
                            ImageURL = "https://www.autocar.co.uk/sites/autocar.co.uk/files/audi-rs7_1.jpg",
                            ManufacturerId = 1,
                            ModelName = "RS7 C7",
                            YearCreated_End = 2019,
                            YearCreated_Start = 2013
                        },
                        new
                        {
                            Id = 18,
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/8/85/Audi_A6_S-line_%28C7%29_%E2%80%93_Frontansicht%2C_1._Mai_2012%2C_D%C3%BCsseldorf.jpg",
                            ManufacturerId = 1,
                            ModelName = "A6 C7",
                            YearCreated_End = 2018,
                            YearCreated_Start = 2011
                        },
                        new
                        {
                            Id = 19,
                            ImageURL = "https://mir-s3-cdn-cf.behance.net/project_modules/fs/b2ebb974237045.5c27acde184ed.jpg",
                            ManufacturerId = 1,
                            ModelName = "Q7 4L",
                            YearCreated_End = 2015,
                            YearCreated_Start = 2005
                        });
                });

            modelBuilder.Entity("RevTech.Data.Models.Vehicles.CarModelEngine", b =>
                {
                    b.Property<int>("CarModelId")
                        .HasColumnType("int");

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.HasKey("CarModelId", "EngineId");

                    b.HasIndex("EngineId");

                    b.ToTable("CarModelsEngines");
                });

            modelBuilder.Entity("RevTech.Data.Models.Vehicles.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Torque")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("RevTech.Data.Models.Vehicles.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageURL = "https://w7.pngwing.com/pngs/115/486/png-transparent-audi-tt-car-volkswagen-group-audi-rs-6-audi-text-trademark-logo.png",
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 2,
                            ImageURL = "https://w7.pngwing.com/pngs/986/859/png-transparent-mercedes-benz-u-s-international-car-daimler-ag-mercedes-benz-angle-trademark-logo.png",
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 3,
                            ImageURL = "https://image.similarpng.com/very-thumbnail/2020/06/Logo-bmw-vector-transparent-PNG.png",
                            Name = "BMW"
                        });
                });

            modelBuilder.Entity("RevTech.Data.User.UserVehicleConfiguration", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ConfigurationId");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("UserVehicleConfiguration");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.ECUTuning", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.Engine", "Engine")
                        .WithMany("ECUTunings")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.ExhaustKit", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.Engine", "Engine")
                        .WithMany("ExhaustKits")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.FuelPump", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.Engine", "Engine")
                        .WithMany("FuelPumps")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.InjectorKit", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.Engine", "Engine")
                        .WithMany("InjectorKits")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.OilCooler", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.Engine", "Engine")
                        .WithMany("OilCoolers")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.SparkPlugs", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.Engine", "Engine")
                        .WithMany("SparkPlugs")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.SuperchargerKit", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.Engine", "Engine")
                        .WithMany("SuperchargerKits")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.TCUTuning", b =>
                {
                    b.HasOne("RevTech.Data.Models.PerformanceParts.ECUTuning", "ECUTuning")
                        .WithMany("TCUTunings")
                        .HasForeignKey("ECUTuningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ECUTuning");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.TurboKit", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.Engine", "Engine")
                        .WithMany("TurboKits")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("RevTech.Data.Models.UserConfiguration.UserConfiguration", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RevTech.Data.Models.PerformanceParts.ECUTuning", "ECUTuning")
                        .WithMany()
                        .HasForeignKey("ECUTuningId");

                    b.HasOne("RevTech.Data.Models.PerformanceParts.ExhaustKit", "ExhaustKit")
                        .WithMany()
                        .HasForeignKey("ExhaustKitId");

                    b.HasOne("RevTech.Data.Models.PerformanceParts.FuelPump", "FuelPump")
                        .WithMany()
                        .HasForeignKey("FuelPumpId");

                    b.HasOne("RevTech.Data.Models.PerformanceParts.InjectorKit", "InjectorKit")
                        .WithMany()
                        .HasForeignKey("InjectorKitId");

                    b.HasOne("RevTech.Data.Models.PerformanceParts.OilCooler", "OilCooler")
                        .WithMany()
                        .HasForeignKey("OilCoolerId");

                    b.HasOne("RevTech.Data.Models.PerformanceParts.SparkPlugs", "SparkPlugs")
                        .WithMany()
                        .HasForeignKey("SparkPlugsId");

                    b.HasOne("RevTech.Data.Models.PerformanceParts.SuperchargerKit", "SuperchargerKit")
                        .WithMany()
                        .HasForeignKey("SuperchargerKitId");

                    b.HasOne("RevTech.Data.Models.PerformanceParts.TCUTuning", "TCUTuning")
                        .WithMany()
                        .HasForeignKey("TCUTuningId");

                    b.HasOne("RevTech.Data.Models.PerformanceParts.TurboKit", "TurboKit")
                        .WithMany()
                        .HasForeignKey("TurboKitId");

                    b.Navigation("CarModel");

                    b.Navigation("ECUTuning");

                    b.Navigation("ExhaustKit");

                    b.Navigation("FuelPump");

                    b.Navigation("InjectorKit");

                    b.Navigation("OilCooler");

                    b.Navigation("SparkPlugs");

                    b.Navigation("SuperchargerKit");

                    b.Navigation("TCUTuning");

                    b.Navigation("TurboKit");
                });

            modelBuilder.Entity("RevTech.Data.Models.Vehicles.CarModel", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.Manufacturer", "Manufacturer")
                        .WithMany("CarModel")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("RevTech.Data.Models.Vehicles.CarModelEngine", b =>
                {
                    b.HasOne("RevTech.Data.Models.Vehicles.CarModel", "CarModel")
                        .WithMany("CarModelEngines")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RevTech.Data.Models.Vehicles.Engine", "Engine")
                        .WithMany("CarModelEngines")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("RevTech.Data.User.UserVehicleConfiguration", b =>
                {
                    b.HasOne("RevTech.Data.Models.UserConfiguration.UserConfiguration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RevTech.Data.Models.PerformanceParts.ECUTuning", b =>
                {
                    b.Navigation("TCUTunings");
                });

            modelBuilder.Entity("RevTech.Data.Models.Vehicles.CarModel", b =>
                {
                    b.Navigation("CarModelEngines");
                });

            modelBuilder.Entity("RevTech.Data.Models.Vehicles.Engine", b =>
                {
                    b.Navigation("CarModelEngines");

                    b.Navigation("ECUTunings");

                    b.Navigation("ExhaustKits");

                    b.Navigation("FuelPumps");

                    b.Navigation("InjectorKits");

                    b.Navigation("OilCoolers");

                    b.Navigation("SparkPlugs");

                    b.Navigation("SuperchargerKits");

                    b.Navigation("TurboKits");
                });

            modelBuilder.Entity("RevTech.Data.Models.Vehicles.Manufacturer", b =>
                {
                    b.Navigation("CarModel");
                });
#pragma warning restore 612, 618
        }
    }
}
